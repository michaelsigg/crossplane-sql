version: '3'

includes:
  base:
    taskfile: https://gist.githubusercontent.com/michaelsigg/f0582c84212d0814ba37e6ef228a7b77/raw/50ff8ce93a2b665e8ea91f52499ddd855d7efb69/Taskfile.yml
    flatten: true

vars:
  CLUSTER_NAME: crossplane-sql

tasks:

  setup-cluster:
    desc: Setup the cluster with Crossplane
    cmds:
      - task: setup-base-cluster
      - task: deploy-crossplane
      - task: deploy-crossplane-functions
      - task: deploy-crossplane-provider-sql
      - task: deploy-crossplane-provider-kubernetes
      - task: deploy-crossplane-provider-http
      - task: deploy-atlas-operator
      - task: get-argocd-login-info

  deploy-crossplane:
    desc: Deploy crossplane
    cmds:
      - kubectl apply -f argocd_apps/crossplane.yaml
      - kubectl wait --namespace argocd --for='jsonpath={.status.health.status}=Healthy' applications.argoproj.io/crossplane --timeout=120s

  deploy-crossplane-functions:
    desc: Deploy crossplane functions
    cmds:
      - kubectl apply -f argocd_apps/crossplane-functions.yaml

  deploy-crossplane-provider-sql:
    desc: Deploy crossplane provider sql
    cmds:
      - kubectl apply -f argocd_apps/crossplane-provider-sql.yaml

  deploy-crossplane-provider-helm:
    desc: Deploy crossplane provider helm
    cmds:
      - kubectl apply -f argocd_apps/crossplane-provider-helm.yaml

  deploy-crossplane-provider-kubernetes:
    desc: Deploy crossplane provider kubernetes
    cmds:
      - kubectl apply -f argocd_apps/crossplane-provider-kubernetes.yaml
  
  deploy-crossplane-provider-http:
    desc: Deploy crossplane provider http
    cmds:
      - kubectl apply -f argocd_apps/crossplane-provider-http.yaml

  deploy-atlas-operator:
    desc: Deploy the Atlas Operator
    cmds:
      - kubectl apply -f argocd_apps/atlas-operator.yaml

  deploy-postgresql-server:
    desc: Deploy and expose a sample postgres server
    cmds:
      - kustomize build examples/provider-sql | kubectl apply -f -
      - kubectl wait --namespace pgs --for=condition=ready --timeout=90s pods -l app=postgres

  deploy-postgresql-role:
    desc: Deploy a postgresql role "myuser"
    cmds:
      - task: deploy-postgresql-server
      - kubectl apply -f examples/provider-sql/role.yaml
      - kubectl wait --namespace pgs --for=condition=synced roles.postgresql.sql.crossplane.io/myuser --timeout=90s
      - kubectl exec -n pgs -it $(kubectl get pods -n pgs -l app=postgres -o jsonpath='{.items[0].metadata.name}') -- psql -U postgres -d postgres -c "\du"

  deploy-postgresql-database:
    desc: Deploy a postgresql database "myfirstdb"
    cmds:
      - task: deploy-postgresql-role
      - kubectl apply -f examples/provider-sql/database.yaml
      - kubectl wait --namespace pgs --for=condition=synced databases.postgresql.sql.crossplane.io/myfirstdb --timeout=90s
      - kubectl exec -n pgs -it $(kubectl get pods -n pgs -l app=postgres -o jsonpath='{.items[0].metadata.name}') -- psql -U postgres -d postgres -c "\l"

  deploy-postgresql-atlas-schema:
    desc: Deploy an example postgresql schema with atlas operator
    cmds:
      - task: deploy-postgresql-database
      - kubectl apply -f examples/provider-sql/atlas-test.yaml
      - kubectl wait --namespace pgs --for=condition=ready atlasschemas.db.atlasgo.io/atlasschema-pg --timeout=90s
      - kubectl exec -n pgs -it $(kubectl get pods -n pgs -l app=postgres -o jsonpath='{.items[0].metadata.name}') -- psql -U postgres -d myfirstdb -c "\dt"

  deploy-demo-db-instances:
    desc: Deploy demo database instances
    cmds:
      - kubectl apply -f examples/api/demo-db-instances/crd_dbinstance.yaml
      - kubectl wait --for=condition=Established crd/dbinstances.database.bedag.ch --timeout=90s
      - kustomize build examples/api/demo-db-instances | kubectl apply -f -
      - kubectl wait --namespace bedag-db --for=condition=ready --timeout=90s pods -l app=postgres

  deploy-demo-xrd-and-xr:
    desc: Deploy demo XRD and XR
    cmds:
      - kustomize build examples/api/bedag_database | kubectl apply -f -
      - kubectl wait --for=condition=Established compositeresourcedefinition.apiextensions.crossplane.io/xdatabases.database.bedag.ch --timeout=90s
      - kubectl apply -f examples/api/bedag_database/composition.yaml

  deploy-pode:
    desc: Deploy a pode server
    cmds:
      - kustomize build examples/provider-http-with-pode | kubectl apply -f -
      - kubectl wait --namespace pode --for=condition=ready --timeout=90s pods -l app=pode
