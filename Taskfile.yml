version: '3'

vars:
  CLUSTER_NAME: '{{.CLUSTER_NAME | default "crossplane-sql"}}'
  CLUSTER_CONFIG: '{{.CLUSTER_CONFIG | default "kind-cilium-lb/kind-config.yaml"}}'
  DOCKER_NETWORK: '{{.DOCKER_NETWORK | default "kind"}}'
  PREP_DOCKER_NETWORK:
    sh: docker network inspect {{.DOCKER_NETWORK}} >/dev/null 2>&1 || docker network create --driver bridge --scope local {{.DOCKER_NETWORK}}
  DOCKER_NET_CIDR:
    sh: docker network inspect {{.DOCKER_NETWORK}} --format json | jq '.[].IPAM.Config[] | select(.Subnet | contains(":") | not) | .Subnet' -r
  LB_BLOCK_START:
    sh: echo {{.DOCKER_NET_CIDR}} | sed -E 's@(^|[^0-9])0/(16|24)@\1100@g'
  LB_BLOCK_STOP:
    sh: echo {{.DOCKER_NET_CIDR}} | sed -E 's@(^|[^0-9])0/(16|24)@\1150@g'

tasks:
  default:
    desc: Display all available tasks
    cmds:
      - task --list-all --sort none

  setup-cluster:
    desc: Setup the cluster with Crossplane
    cmds:
      - task: create-kind-cluster
      - task: deploy-cilium
      - task: deploy-cilium-lb
      - task: install-argocd
      - task: deploy-crossplane
      - task: deploy-crossplane-functions
      - task: deploy-crossplane-provider-sql
      - task: get-argocd-login-info

  create-kind-cluster:
    desc: Create a kind cluster with name "{{.CLUSTER_NAME}}" and config "{{.CLUSTER_CONFIG}}"
    label: create kind cluster {{.CLUSTER_NAME}} and config "{{.CLUSTER_CONFIG}}"
    dotenv: ['.env'] #https://taskfile.dev/next/experiments/env-precedence
    cmds:
      - kind create cluster --name {{.CLUSTER_NAME}} --config {{.CLUSTER_CONFIG}}
    status:
      - kind get clusters | grep -xq {{.CLUSTER_NAME}}
    requires:
      vars: [CLUSTER_NAME, CLUSTER_CONFIG]

  delete-kind-cluster:
    desc: Delete the kind cluster with name "{{.CLUSTER_NAME}}"
    prompt: Do you want to delete kind cluster {{.CLUSTER_NAME}}?
    cmds:
      - kind delete cluster --name {{.CLUSTER_NAME}}
    preconditions:
      - kind get clusters | grep -xq {{.CLUSTER_NAME}}
    requires:
      vars: [CLUSTER_NAME]

  deploy-cilium:
    desc: Deploy Cilium with L2 announcement
    cmds:
      - helm upgrade cilium cilium --install --reuse-values --repo https://helm.cilium.io --namespace kube-system --version v1.17.1 --set ipam.mode=kubernetes --set kubeProxyReplacement=true --set k8sServiceHost="{{.CLUSTER_NAME}}-control-plane" --set l2announcements.enabled=true --set k8sServicePort=6443 --set socketLB.hostNamespaceOnly=true --set gatewayAPI.enabled=true --set hubble.relay.enabled=true --set hubble.ui.enabled=true --set ingressController.enabled=true --set ingressController.loadbalancerMode=shared --set ingressController.default=true
      - cilium status --wait
    requires:
      vars: [CLUSTER_NAME]

  deploy-cilium-lb:
    desc: Deploy L2 service announcement
    cmds:
      - kubectl apply -f kind-cilium-lb/l2policy.yaml
      - yq -i '.spec.blocks[0].start = "{{.LB_BLOCK_START}}"' kind-cilium-lb/pool.yaml
      - yq -i '.spec.blocks[0].stop = "{{.LB_BLOCK_STOP}}"' kind-cilium-lb/pool.yaml
      - kubectl apply -f kind-cilium-lb/pool.yaml
    requires:
      vars: [LB_BLOCK_START, LB_BLOCK_STOP]

  install-argocd:
    desc: Install ArgoCD
    cmds:
      - helm repo add argo https://argoproj.github.io/argo-helm --force-update
      - helm upgrade argocd argo/argo-cd --install --wait --timeout 5m --namespace argocd --create-namespace --set "configs.cm.application\.resourceTrackingMethod=annotation" --set server.service.type=LoadBalancer
      - SECONDS=0; while [ -z "`kubectl -n argocd get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}'`" ]; do echo "Waiting for loadBalancer IP..."; sleep 2; [ "$SECONDS" -gt 300 ] && echo "Timed out waiting for Loadbalancer IP" >&2 && exit 1; done; echo "Loadbalancer IP available!"

  get-argocd-login-info:
    desc: Print ArgoCD URL and Login credentials
    cmds:
      - echo "ArgoCD URL -> https://`kubectl -n argocd get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}'`"
      - echo "ArgoCD Username -> admin"
      - echo "ArgoCD Password -> $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)"

  login-argocd:
    desc: Login to ArgoCD
    cmds:
      - argocd login $(kubectl -n argocd get svc argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].ip}') --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) --insecure

  deploy-crossplane:
    desc: Deploy crossplane
    cmds:
      - kubectl apply -f argocd_apps/crossplane.yaml
      - task: login-argocd
      - argocd app wait argocd/crossplane

  deploy-crossplane-functions:
    desc: Deploy crossplane functions
    cmds:
      - kubectl apply -f argocd_apps/crossplane-functions.yaml

  deploy-crossplane-provider-sql:
    desc: Deploy crossplane provider sql
    cmds:
      - kubectl apply -f argocd_apps/crossplane-provider-sql.yaml

  deploy-crossplane-provider-helm:
    desc: Deploy crossplane provider helm
    cmds:
      - kubectl apply -f argocd_apps/crossplane-provider-helm.yaml

  deploy-crossplane-provider-kubernetes:
    desc: Deploy crossplane provider kubernetes
    cmds:
      - kubectl apply -f argocd_apps/crossplane-provider-kubernetes.yaml

  deploy-postgresql-pod:
    desc: Deploy and expose a sample postgres pod
    cmds:
      - kubectl apply -f examples/sample-pod-with-lb-service.yaml
      - while ! kubectl -n default get svc postgres -o jsonpath='{.status.loadBalancer.ingress[0].ip}' >/dev/null 2>&1; do sleep 1; done
      - while :; do curl -m 1 -o /dev/null -s $(kubectl -n default get svc postgres -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):5432 || [ $? -eq 52 ] && break; sleep 1; done
      - kubectl apply -f examples/db-conn-secret.yaml
      - kubectl apply -f examples/postgresql-provider-config.yaml

  deploy-postgresql-role:
    desc: Deploy a postgresql role "myuser"
    cmds:
      - task: deploy-postgresql-pod
      - kubectl apply -f examples/role.yaml
      - kubectl wait --namespace default --for=condition=synced roles.postgresql.sql.crossplane.io/myuser --timeout=90s
      - PGPASSWORD=pass psql -h $(kubectl -n default get svc postgres -o jsonpath='{.status.loadBalancer.ingress[0].ip}') -U postgres -p 5432 -c "\du"

  deploy-postgresql-database:
    desc: Deploy a postgresql database "myfirstdb"
    cmds:
      - task: deploy-postgresql-role
      - kubectl apply -f examples/database.yaml
      - kubectl wait --namespace default --for=condition=synced databases.postgresql.sql.crossplane.io/myfirstdb --timeout=90s
      - PGPASSWORD=pass psql -h $(kubectl -n default get svc postgres -o jsonpath='{.status.loadBalancer.ingress[0].ip}') -U postgres -p 5432 -c "\l"
